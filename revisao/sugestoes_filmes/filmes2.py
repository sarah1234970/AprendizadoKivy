# Importa√ß√£o dos m√≥dulos do Kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.togglebutton import ToggleButton
import random  # Para sortear filmes aleatoriamente


class FilmesApp(App):
    def build(self):
        # Layout principal vertical, com espa√ßamento e padding
        layout = BoxLayout(orientation="vertical", padding=20, spacing=15)

        # Campo de entrada de nome do usu√°rio
        self.nome_input = TextInput(
            hint_text="Digite seu nome",  # Texto de dica
            multiline=False,               # N√£o permite m√∫ltiplas linhas
            size_hint=(1, 0.1)             # Ocupar toda a largura e altura proporcional 0.1
        )

        # Vari√°vel para armazenar o g√™nero selecionado
        self.genero_escolhido = None

        # Layout horizontal para os bot√µes de g√™nero
        botoes_genero = BoxLayout(size_hint=(1, 0.15), spacing=10)
        for genero in ["A√ß√£o", "Com√©dia", "Terror", "Drama", "Anima√ß√£o"]:
            # Cada ToggleButton representa um g√™nero
            botao = ToggleButton(
                text=genero,
                group="genero"  # Apenas um bot√£o do grupo pode estar ativo
            )
            # Conecta o clique do bot√£o √† fun√ß√£o que salva o g√™nero selecionado
            botao.bind(on_press=self.selecionar_genero)
            botoes_genero.add_widget(botao)

        # Layout horizontal para os bot√µes principais: Sugerir Filme e Limpar
        botoes = BoxLayout(size_hint=(1, 0.15), spacing=10)

        # Bot√£o "Sugerir Filme"
        botao_sugerir = Button(
            text="üé¨ Sugerir Filme",
            background_color=(0.2, 0.6, 0.8, 1)  # Azul claro
        )
        botao_sugerir.bind(on_press=self.sugerir_filme)  # Conecta a fun√ß√£o de sugest√£o

        # Bot√£o "Limpar"
        botao_limpar = Button(
            text="üßπ Limpar",
            background_color=(0.8, 0.3, 0.3, 1)  # Vermelho
        )
        botao_limpar.bind(on_press=self.limpar)  # Conecta a fun√ß√£o de limpar

        # Adiciona os bot√µes ao layout horizontal
        botoes.add_widget(botao_sugerir)
        botoes.add_widget(botao_limpar)

        # Label para exibir mensagens ao usu√°rio
        self.mensagem_label = Label(
            text="[b]Digite seu nome e escolha um g√™nero[/b]",  # Texto inicial
            markup=True,                                      # Permite negrito, it√°lico e cores
            size_hint=(1, 0.2),                               # Ocupa largura total e altura proporcional 0.2
            halign="center",                                  # Alinha horizontalmente ao centro
            valign="middle"                                   # Alinha verticalmente ao meio
        )
        # Faz o texto se ajustar ao tamanho do Label
        self.mensagem_label.bind(size=self.mensagem_label.setter("text_size"))

        # Adiciona os widgets ao layout principal
        layout.add_widget(self.nome_input)
        layout.add_widget(botoes_genero)
        layout.add_widget(botoes)
        layout.add_widget(self.mensagem_label)

        return layout

    # Fun√ß√£o chamada quando um ToggleButton de g√™nero √© clicado
    def selecionar_genero(self, instance):
        self.genero_escolhido = instance.text  # Salva o g√™nero selecionado

    # Fun√ß√£o chamada quando o bot√£o "Sugerir Filme" √© clicado
    def sugerir_filme(self, instance):
        # Dicion√°rio com filmes por g√™nero, incluindo ano
        filmes = {
            "Com√©dia": ["As Branquelas (2004)", "Todo Mundo em P√¢nico (2000)", "Garotas Malvadas (2004)"],
            "Terror": ["Invoca√ß√£o do Mal (2013)", "It: A Coisa (2017)", "A Hora do Pesadelo (1984)"],
            "A√ß√£o": ["Velozes e Furiosos (2001)", "Miss√£o Imposs√≠vel (1996)", "Vingadores: Ultimato (2019)"],
            "Drama": ["√Ä Procura da Felicidade (2006)", "Clube da Luta (1999)", "O Menino do Pijama Listrado (2008)"],
            "Anima√ß√£o": ["Procurando Nemo (2003)", "Divertida Mente (2015)", "Shrek (2001)"]
        }

        nome = self.nome_input.text.strip()  # Remove espa√ßos em branco do nome
        genero = self.genero_escolhido       # Obt√©m o g√™nero selecionado

        # Valida√ß√µes
        if not nome:
            # Usu√°rio n√£o digitou nome
            self.mensagem_label.text = "[color=ff0000]Por favor, digite seu nome.[/color]"
        elif not genero:
            # Usu√°rio n√£o selecionou g√™nero
            self.mensagem_label.text = "[color=ff0000]Por favor, escolha um g√™nero.[/color]"
        else:
            # Sorteia um filme aleatoriamente do g√™nero escolhido
            filme = random.choice(filmes[genero])
            # Exibe a mensagem final com nome, g√™nero e filme
            self.mensagem_label.text = f"Ol√°, [b]{nome}[/b]! Sua sugest√£o de filme de [b]{genero}[/b] √©: [i]{filme}[/i]."

    # Fun√ß√£o chamada quando o bot√£o "Limpar" √© clicado
    def limpar(self, instance):
        self.nome_input.text = ""           # Limpa o campo de nome
        self.genero_escolhido = None        # Reseta o g√™nero selecionado
        self.mensagem_label.text = "[b]Digite seu nome e escolha um g√™nero[/b]"  # Mensagem inicial


# Executa o app
if __name__ == "__main__":
    FilmesApp().run()
